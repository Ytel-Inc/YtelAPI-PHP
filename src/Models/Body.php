<?php
/*
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace YtelAPILib\Models;

use JsonSerializable;

/**
 * @todo Write general description for this model
 */
class Body implements JsonSerializable
{
    /**
     * A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
     * @required
     * @maps From
     * @var string $from public property
     */
    public $from;

    /**
     * To number
     * @required
     * @maps To
     * @var string $to public property
     */
    public $to;

    /**
     * URL requested once the call connects
     * @required
     * @maps Url
     * @var string $url public property
     */
    public $url;

    /**
     * Specifies the HTTP method used to request the required URL once call connects.
     * @maps Method
     * @var string|null $method public property
     */
    public $method;

    /**
     * URL that can be requested to receive notification when call has ended. A set of default parameters
     * will be sent here once the call is finished.
     * @maps StatusCallBackUrl
     * @var string|null $statusCallBackUrl public property
     */
    public $statusCallBackUrl;

    /**
     * Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     * @maps StatusCallBackMethod
     * @var string|null $statusCallBackMethod public property
     */
    public $statusCallBackMethod;

    /**
     * URL requested if the initial Url parameter fails or encounters an error
     * @maps FallBackUrl
     * @var string|null $fallBackUrl public property
     */
    public $fallBackUrl;

    /**
     * Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @maps FallBackMethod
     * @var string|null $fallBackMethod public property
     */
    public $fallBackMethod;

    /**
     * URL that can be requested every 60 seconds during the call to notify of elapsed tim
     * @maps HeartBeatUrl
     * @var string|null $heartBeatUrl public property
     */
    public $heartBeatUrl;

    /**
     * Specifies the HTTP method used to request HeartbeatUrl.
     * @maps HeartBeatMethod
     * @var string|null $heartBeatMethod public property
     */
    public $heartBeatMethod;

    /**
     * Time (in seconds) Ytel should wait while the call is ringing before canceling the call
     * @maps Timeout
     * @var integer|null $timeout public property
     */
    public $timeout;

    /**
     * DTMF Digits to play to the call once it connects. 0-9, #, or *
     * @maps PlayDtmf
     * @var string|null $playDtmf public property
     */
    public $playDtmf;

    /**
     * Specifies if the caller id will be hidden
     * @maps HideCallerId
     * @var bool|null $hideCallerId public property
     */
    public $hideCallerId;

    /**
     * Specifies if the call should be recorded
     * @maps Record
     * @var bool|null $record public property
     */
    public $record;

    /**
     * Recording parameters will be sent here upon completion
     * @maps RecordCallBackUrl
     * @var string|null $recordCallBackUrl public property
     */
    public $recordCallBackUrl;

    /**
     * Method used to request the RecordCallback URL.
     * @maps RecordCallBackMethod
     * @var string|null $recordCallBackMethod public property
     */
    public $recordCallBackMethod;

    /**
     * Specifies if the call recording should be transcribed
     * @maps Transcribe
     * @var bool|null $transcribe public property
     */
    public $transcribe;

    /**
     * Transcription parameters will be sent here upon completion
     * @maps TranscribeCallBackUrl
     * @var string|null $transcribeCallBackUrl public property
     */
    public $transcribeCallBackUrl;

    /**
     * How Ytel should handle the receiving numbers voicemail machine
     * @maps IfMachine
     * @var string|null $ifMachine public property
     */
    public $ifMachine;

    /**
     * URL requested when IfMachine=continue
     * @maps IfMachineUrl
     * @var string|null $ifMachineUrl public property
     */
    public $ifMachineUrl;

    /**
     * Method used to request the IfMachineUrl.
     * @maps IfMachineMethod
     * @var string|null $ifMachineMethod public property
     */
    public $ifMachineMethod;

    /**
     * Specify if survey should be enable or not
     * @maps Feedback
     * @var bool|null $feedback public property
     */
    public $feedback;

    /**
     * The unique identifier for the survey.
     * @maps SurveyId
     * @var string|null $surveyId public property
     */
    public $surveyId;

    /**
     * Constructor to set initial or default values of member properties
     * @param string  $from                  Initialization value for $this->from
     * @param string  $to                    Initialization value for $this->to
     * @param string  $url                   Initialization value for $this->url
     * @param string  $method                Initialization value for $this->method
     * @param string  $statusCallBackUrl     Initialization value for $this->statusCallBackUrl
     * @param string  $statusCallBackMethod  Initialization value for $this->statusCallBackMethod
     * @param string  $fallBackUrl           Initialization value for $this->fallBackUrl
     * @param string  $fallBackMethod        Initialization value for $this->fallBackMethod
     * @param string  $heartBeatUrl          Initialization value for $this->heartBeatUrl
     * @param string  $heartBeatMethod       Initialization value for $this->heartBeatMethod
     * @param integer $timeout               Initialization value for $this->timeout
     * @param string  $playDtmf              Initialization value for $this->playDtmf
     * @param bool    $hideCallerId          Initialization value for $this->hideCallerId
     * @param bool    $record                Initialization value for $this->record
     * @param string  $recordCallBackUrl     Initialization value for $this->recordCallBackUrl
     * @param string  $recordCallBackMethod  Initialization value for $this->recordCallBackMethod
     * @param bool    $transcribe            Initialization value for $this->transcribe
     * @param string  $transcribeCallBackUrl Initialization value for $this->transcribeCallBackUrl
     * @param string  $ifMachine             Initialization value for $this->ifMachine
     * @param string  $ifMachineUrl          Initialization value for $this->ifMachineUrl
     * @param string  $ifMachineMethod       Initialization value for $this->ifMachineMethod
     * @param bool    $feedback              Initialization value for $this->feedback
     * @param string  $surveyId              Initialization value for $this->surveyId
     */
    public function __construct()
    {
        if (23 == func_num_args()) {
            $this->from                  = func_get_arg(0);
            $this->to                    = func_get_arg(1);
            $this->url                   = func_get_arg(2);
            $this->method                = func_get_arg(3);
            $this->statusCallBackUrl     = func_get_arg(4);
            $this->statusCallBackMethod  = func_get_arg(5);
            $this->fallBackUrl           = func_get_arg(6);
            $this->fallBackMethod        = func_get_arg(7);
            $this->heartBeatUrl          = func_get_arg(8);
            $this->heartBeatMethod       = func_get_arg(9);
            $this->timeout               = func_get_arg(10);
            $this->playDtmf              = func_get_arg(11);
            $this->hideCallerId          = func_get_arg(12);
            $this->record                = func_get_arg(13);
            $this->recordCallBackUrl     = func_get_arg(14);
            $this->recordCallBackMethod  = func_get_arg(15);
            $this->transcribe            = func_get_arg(16);
            $this->transcribeCallBackUrl = func_get_arg(17);
            $this->ifMachine             = func_get_arg(18);
            $this->ifMachineUrl          = func_get_arg(19);
            $this->ifMachineMethod       = func_get_arg(20);
            $this->feedback              = func_get_arg(21);
            $this->surveyId              = func_get_arg(22);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['From']                  = $this->from;
        $json['To']                    = $this->to;
        $json['Url']                   = $this->url;
        $json['Method']                = $this->method;
        $json['StatusCallBackUrl']     = $this->statusCallBackUrl;
        $json['StatusCallBackMethod']  = $this->statusCallBackMethod;
        $json['FallBackUrl']           = $this->fallBackUrl;
        $json['FallBackMethod']        = $this->fallBackMethod;
        $json['HeartBeatUrl']          = $this->heartBeatUrl;
        $json['HeartBeatMethod']       = $this->heartBeatMethod;
        $json['Timeout']               = $this->timeout;
        $json['PlayDtmf']              = $this->playDtmf;
        $json['HideCallerId']          = $this->hideCallerId;
        $json['Record']                = $this->record;
        $json['RecordCallBackUrl']     = $this->recordCallBackUrl;
        $json['RecordCallBackMethod']  = $this->recordCallBackMethod;
        $json['Transcribe']            = $this->transcribe;
        $json['TranscribeCallBackUrl'] = $this->transcribeCallBackUrl;
        $json['IfMachine']             = $this->ifMachine;
        $json['IfMachineUrl']          = $this->ifMachineUrl;
        $json['IfMachineMethod']       = $this->ifMachineMethod;
        $json['Feedback']              = $this->feedback;
        $json['SurveyId']              = $this->surveyId;

        return $json;
    }
}
