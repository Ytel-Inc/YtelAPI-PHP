<?php
/*
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace YtelAPILib\Models;

use JsonSerializable;

/**
 * @todo Write general description for this model
 */
class Body55 implements JsonSerializable
{
    /**
     * A valid 10-digit number (E.164 format) that will be initiating the conference call.
     * @required
     * @maps From
     * @var string $from public property
     */
    public $from;

    /**
     * A valid 10-digit number (E.164 format) that is to receive the conference call.
     * @required
     * @maps To
     * @var string $to public property
     */
    public $to;

    /**
     * Specifies the HTTP method used to request the required URL once call connects.
     * @maps Method
     * @var string|null $method public property
     */
    public $method;

    /**
     * URL that can be requested to receive notification when call has ended. A set of default parameters
     * will be sent here once the conference is finished.
     * @maps StatusCallBackUrl
     * @var string|null $statusCallBackUrl public property
     */
    public $statusCallBackUrl;

    /**
     * Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     * @maps StatusCallBackMethod
     * @var string|null $statusCallBackMethod public property
     */
    public $statusCallBackMethod;

    /**
     * URL requested if the initial Url parameter fails or encounters an error
     * @maps FallbackUrl
     * @var string|null $fallbackUrl public property
     */
    public $fallbackUrl;

    /**
     * Specifies the HTTP method used to request the required FallbackUrl once call connects.
     * @maps FallbackMethod
     * @var string|null $fallbackMethod public property
     */
    public $fallbackMethod;

    /**
     * Specifies if the conference should be recorded.
     * @maps Record
     * @var bool|null $record public property
     */
    public $record;

    /**
     * Recording parameters will be sent here upon completion.
     * @maps RecordCallBackUrl
     * @var string|null $recordCallBackUrl public property
     */
    public $recordCallBackUrl;

    /**
     * Specifies the HTTP method used to request the required URL once conference connects.
     * @maps RecordCallBackMethod
     * @var string|null $recordCallBackMethod public property
     */
    public $recordCallBackMethod;

    /**
     * Schedule conference in future. Schedule time must be greater than current time
     * @maps ScheduleTime
     * @var string|null $scheduleTime public property
     */
    public $scheduleTime;

    /**
     * The number of seconds the call stays on the line while waiting for an answer. The max time limit is
     * 999 and the default limit is 60 seconds but lower times can be set.
     * @maps Timeout
     * @var integer|null $timeout public property
     */
    public $timeout;

    /**
     * Constructor to set initial or default values of member properties
     * @param string  $from                 Initialization value for $this->from
     * @param string  $to                   Initialization value for $this->to
     * @param string  $method               Initialization value for $this->method
     * @param string  $statusCallBackUrl    Initialization value for $this->statusCallBackUrl
     * @param string  $statusCallBackMethod Initialization value for $this->statusCallBackMethod
     * @param string  $fallbackUrl          Initialization value for $this->fallbackUrl
     * @param string  $fallbackMethod       Initialization value for $this->fallbackMethod
     * @param bool    $record               Initialization value for $this->record
     * @param string  $recordCallBackUrl    Initialization value for $this->recordCallBackUrl
     * @param string  $recordCallBackMethod Initialization value for $this->recordCallBackMethod
     * @param string  $scheduleTime         Initialization value for $this->scheduleTime
     * @param integer $timeout              Initialization value for $this->timeout
     */
    public function __construct()
    {
        if (12 == func_num_args()) {
            $this->from                 = func_get_arg(0);
            $this->to                   = func_get_arg(1);
            $this->method               = func_get_arg(2);
            $this->statusCallBackUrl    = func_get_arg(3);
            $this->statusCallBackMethod = func_get_arg(4);
            $this->fallbackUrl          = func_get_arg(5);
            $this->fallbackMethod       = func_get_arg(6);
            $this->record               = func_get_arg(7);
            $this->recordCallBackUrl    = func_get_arg(8);
            $this->recordCallBackMethod = func_get_arg(9);
            $this->scheduleTime         = func_get_arg(10);
            $this->timeout              = func_get_arg(11);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['From']                 = $this->from;
        $json['To']                   = $this->to;
        $json['Method']               = $this->method;
        $json['StatusCallBackUrl']    = $this->statusCallBackUrl;
        $json['StatusCallBackMethod'] = $this->statusCallBackMethod;
        $json['FallbackUrl']          = $this->fallbackUrl;
        $json['FallbackMethod']       = $this->fallbackMethod;
        $json['Record']               = $this->record;
        $json['RecordCallBackUrl']    = $this->recordCallBackUrl;
        $json['RecordCallBackMethod'] = $this->recordCallBackMethod;
        $json['ScheduleTime']         = $this->scheduleTime;
        $json['Timeout']              = $this->timeout;

        return $json;
    }
}
